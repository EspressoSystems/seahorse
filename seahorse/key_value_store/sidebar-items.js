initSidebarItems({"enum":[["IndexChange","Changes for in-memory state."],["KeyValueStoreError","Errors happening during key-value store operations."]],"struct":[["KeyNotFoundSnafu","SNAFU context selector for the `KeyValueStoreError::KeyNotFound` variant"],["KeyValueStore","A storage for key-value pairs."],["PersistableMap","A persistable in-memory state."],["PersistenceSnafu","SNAFU context selector for the `KeyValueStoreError::PersistenceError` variant"]],"trait":[["Index","An Interface for an in memory index which can insert and remove items To create a persistable index type you can implement this trait for whatever in memory index you choose to use.  E.g. if you create a new type called CustomHashMap<K,V> you can implement Index<(K,V)> for it and then use the persitable type PersistableMap<(K,V), CustomHashMap<K,V>>."]],"type":[["PersistableBTreeMultiMap",""],["PersistableHashMap",""],["PersistableHashMapBTreeMultiMap",""],["PersistableHashSet",""]]});