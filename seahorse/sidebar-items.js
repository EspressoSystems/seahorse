window.SIDEBAR_ITEMS = {"enum":[["KeystoreError",""]],"fn":[["import_asset","Import an unverified asset."],["new_key_pair",""],["verify_assets","Load a verified asset library with its trusted signer."]],"macro":[["async_write",""],["async_writeln",""],["command","Create a [Command] from a help string and a function."],["count",""]],"mod":[["accounts","The accounts module."],["assets","The assets module."],["cli","The generic CAP Keystore frontend"],["encryption","Symmetric encryption for locally persistent keystore data."],["events","Event definitions for ledger state changes."],["hd","Hierarchical deterministic key generation"],["io","I/O interface for the CLI."],["key_value_store","The key-value store."],["ledger_state","The ledger state module."],["loader","Traits and types for creating and loading keystores."],["lw_merkle_tree","A Merkle tree which supports arbitrarily sparse representations."],["meta","Storage for [KeystoreLoader] metadata."],["reader","Interactive input."],["records","The records module."],["transactions","The transaction module."]],"struct":[["AssetNotFreezableSnafu","SNAFU context selector for the `KeystoreError::AssetNotFreezable` variant"],["AssetNotMintableSnafu","SNAFU context selector for the `KeystoreError::AssetNotMintable` variant"],["AssetNotViewableSnafu","SNAFU context selector for the `KeystoreError::AssetNotViewable` variant"],["AssetVerificationSnafu","SNAFU context selector for the `KeystoreError::AssetVerificationError` variant"],["BadMerkleProofSnafu","SNAFU context selector for the `KeystoreError::BadMerkleProof` variant"],["BincodeSnafu","SNAFU context selector for the `KeystoreError::BincodeError` variant"],["CancelledSnafu","SNAFU context selector for the `KeystoreError::Cancelled` variant"],["CannotDecryptMemoSnafu","SNAFU context selector for the `KeystoreError::CannotDecryptMemo` variant"],["ClientConfigSnafu","SNAFU context selector for the `KeystoreError::ClientConfigError` variant"],["CryptoSnafu","SNAFU context selector for the `KeystoreError::CryptoError` variant"],["EncryptingResourceAdapter",""],["EncryptionSnafu","SNAFU context selector for the `KeystoreError::EncryptionError` variant"],["FailedSnafu","SNAFU context selector for the `KeystoreError::Failed` variant"],["FreezerKeyExistsSnafu","SNAFU context selector for the `KeystoreError::FreezerKeyExists` variant"],["InconsistentAssetSnafu","SNAFU context selector for the `KeystoreError::InconsistentAsset` variant"],["InvalidAddressSnafu","SNAFU context selector for the `KeystoreError::InvalidAddress` variant"],["InvalidBlockSnafu","SNAFU context selector for the `KeystoreError::InvalidBlock` variant"],["InvalidFreezerKeySnafu","SNAFU context selector for the `KeystoreError::InvalidFreezerKey` variant"],["InvalidViewerKeySnafu","SNAFU context selector for the `KeystoreError::InvalidViewerKey` variant"],["IoSnafu","SNAFU context selector for the `KeystoreError::IoError` variant"],["KeySnafu","SNAFU context selector for the `KeystoreError::KeyError` variant"],["KeyValueStoreSnafu","SNAFU context selector for the `KeystoreError::KeyValueStoreError` variant"],["Keystore","The generic CAP keystore implementation."],["KeystoreModel","Transient state derived from the persistent [LedgerState] and [KeystoreStores]."],["KeystoreStores","Storage for keystore resources."],["MnemonicSnafu","SNAFU context selector for the `KeystoreError::MnemonicError` variant"],["NoSuchAccountSnafu","SNAFU context selector for the `KeystoreError::NoSuchAccount` variant"],["NullifierAlreadyPublishedSnafu","SNAFU context selector for the `KeystoreError::NullifierAlreadyPublished` variant"],["PersistenceSnafu","SNAFU context selector for the `KeystoreError::PersistenceError` variant"],["ScanNotFoundSnafu","SNAFU context selector for the `KeystoreError::ScanNotFound` variant"],["TimedOutSnafu","SNAFU context selector for the `KeystoreError::TimedOut` variant"],["TransactionSnafu","SNAFU context selector for the `KeystoreError::TransactionError` variant"],["UndefinedAssetSnafu","SNAFU context selector for the `KeystoreError::UndefinedAsset` variant"],["UserKeyExistsSnafu","SNAFU context selector for the `KeystoreError::UserKeyExists` variant"],["ViewerKeyExistsSnafu","SNAFU context selector for the `KeystoreError::ViewerKeyExists` variant"]],"trait":[["KeystoreBackend","The interface required by the keystore from a specific network/ledger implementation."]]};